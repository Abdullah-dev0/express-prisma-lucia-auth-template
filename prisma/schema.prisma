// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  // directUrl = env("DATABASE_URL")
}

// Define your own datamodels here and run `npx prisma generate dev` to create

model User {
  id                    String                 @id @default(cuid())
  username              String
  password              String?
  email                 String?                @unique
  emailVerified         Boolean?
  avatar                String?
  createdAt             DateTime               @default(now())
  sessions              Session[]
  Account               Account[]
  emailVerificationCode emailVerificationCode?
  Snippet               Snippet[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model emailVerificationCode {
  id         String   @id @default(cuid())
  code       String
  user_id    String   @unique
  email      String
  expires_at DateTime
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Snippet {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  code        String
  language    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
